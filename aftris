#!/usr/bin/env python

import pygame

import modes
from menu import Menu
from controller import EventDispatcher, Player1
from cuts import ShowLogo


TEST_LEVELS=[
    modes.Stage({
        'speed_var': 0,
        'extra_blocks': [((0, 0), 1)],
        'lines_to_go': 10,
        'show_next': True,
        'background': pygame.image.load('res/ingamegnd.png')}),
    modes.Stage({
        'speed_var': 0,
        'extra_blocks': [((1, 0), 1)],
        'lines_to_go': 10,
        'show_next': True,
        'background': pygame.image.load('res/ingamegnd2.png')})
]


class Aftris(object):
    def __init__(self, screen, mode):
        self.__events = EventDispatcher()
        self.__player = Player1()
        self.__events.add_key_down_listener(self.__player)
        
        self.__screen = screen
        self.change_background(pygame.image.load('res/ingamegnd.png'))
        self.__tetris = None
        if mode == 0:
            self.__tetris = modes.Levels(
                stages=TEST_LEVELS,
                callbacks={
                    'start_level': self.new_level,
                    'change_background': self.change_background
                }
            )
        elif mode == 1:
            self.__tetris = modes.Forever(
                callbacks={
                    'change_background': self.change_background
                }
            )
        self.__reatach_user()

    def change_background(self, new_background):
        self.__background = new_background
        self.__screen.blit(self.__background, (0, 0))
        pygame.display.flip()
        
    def new_level(self, level):
        if self.__tetris is None:
            return
        self.__reatach_user()
        
    def __reatach_user(self):
        self.__player.control(self.__tetris.game)

    def run(self):
        while not self.__tetris.game_over:
            self.__events.update()
            self.__tetris.update()
            dirty = self.__tetris.render(self.__screen)
            pygame.display.update(dirty)

        
def main():
    screen = pygame.display.set_mode((640, 480))
    ShowLogo(screen)

    exit_game = False
    while not exit_game:
        menu = Menu(screen, ['Level Mode',
                             'Endless Mode',
                             'Exit'],
                    pygame.image.load('res/menugnd.png'))
        menu.run()
        exit_game = (menu.cancelled or menu.selected == 2)

        if not exit_game:
            Aftris(screen, mode=menu.selected).run()
            
if __name__ == '__main__':
    pygame.init()
    main()
